# -*- coding: utf-8 -*-
"""mypro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o9ltGT_VzmmVICsqcsFUtI3k--sSTzex
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import tensorflow as tf
from PIL import Image
import os
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout

data = []
labels = []
classes = 6
cur_path = os.getcwd()

import os
import numpy as np
from PIL import Image

for i in range(classes):
    path = os.path.join('/content/drive/MyDrive/train', str(i))
    images = os.listdir(path)

    for a in images:
        try:
            image = Image.open(os.path.join(path, a))
            image = image.resize((224, 224))  # Match model input size
            image_array = np.array(image) / 255.0  # Normalize
            data.append(image_array)
            labels.append(i)
        except Exception as e:
            print("Error loading image:", e)

# Convert lists into numpy arrays
data = np.array(data, dtype=np.float32)
labels = np.array(labels)

print("Data shape:", data.shape)  # Should be (num_samples, 224, 224, 3)
print("Labels shape:", labels.shape)  # Should match number of samples

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=32)

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

# Converting the labels into one hot encoding
y_train = to_categorical(y_train, 6)
y_test = to_categorical(y_test, 6)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.layers import BatchNormalization
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from keras.optimizers import RMSprop

# Data Augmentation
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

datagen.fit(X_train)

# Define the model
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=X_train.shape[1:]))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(rate=0.25))

model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(rate=0.5))
model.add(Dense(6, activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])

epochs = 20
history = model.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(X_test, y_test))

model.save("modeles.h5")

# Plotting graphs for accuracy
plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

sample_img = Image.open('/content/drive/MyDrive/train/1/20__0.jpg')
plt.imshow(sample_img)
plt.title("Sample Image (Before Preprocessing)\nLabel: ")
plt.axis('off')
plt.show()

# Preprocess the sample image
sample_img = sample_img.resize((224, 224))
sample_img_array = np.array(sample_img)
sample_img_array = np.expand_dims(sample_img_array, axis=0)

class_labels = {0: '10 rupee', 1: '20 rupee', 2: '50 rupee', 4: '100 rupee', 5: '200 rupee', 6: '500 rupee' }

# Predict the class of the sample image
predicted_class = np.argmax(model.predict(sample_img_array))
predicted_label = class_labels[predicted_class]

print("Predicted Label:", predicted_label)

#Display the preprocessed image and its predicted class
plt.imshow(sample_img_array[0])
plt.title("Sample Image (Preprocessed)\nPredicted Class: " + str(predicted_class) + "\nPredicted Label: " + predicted_label)
plt.axis('off')
plt.show()

# Plotting graph for testing accuracy
plt.plot(history.history['val_accuracy'], label='testing accuracy')
plt.title('Testing Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(X_test, y_test)

# Print the test loss and accuracy
print("Test Loss:", test_loss)
print("Test Accuracy:", test_accuracy)

model.save("modeles.h5")

import tensorflow as tf

# Load the Keras model
model = tf.keras.models.load_model('modeles.h5')

from google.colab import files

# Save and download the model
files.download('modeles.h5')

# Convert the model to TFLite format
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TFLite model
with open('modeles.tflite', 'wb') as f:
    f.write(tflite_model)

print("âœ… Model converted successfully to model.tflite")



